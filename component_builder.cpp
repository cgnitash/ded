
#include <algorithm>
#include <fstream>
#include <iostream>
#include <numeric>
#include <random>
#include <range/v3/all.hpp>
#include <regex>
#include <string>
#include <string_view>
#include <vector>

using opts = std::map<std::string, std::vector<std::string>>;

opts
    get_build_options(std::string fname)
{

  opts          build_options;
  std::ifstream cfg(fname);
  if (!cfg.is_open())
  {
    std::cout << "Error: component file " << fname << " not found" << std::endl;
    std::exit(1);
  }
  std::regex r(R"~~(^\s*(Entity|Environment|Population)\s*:\s*(\w+)\s*$)~~");
  std::regex comments(R"~~(#.*$)~~");
  std::regex spaces(R"~~(^\s*$)~~");
  for (std::string line; std::getline(cfg, line);)
  {
    auto clean_line = std::regex_replace(line, comments, "");
    if (std::regex_match(clean_line, spaces))
      continue;
    std::smatch m;
    if (std::regex_match(clean_line, m, r))
      build_options[m[1]].push_back(m[2]);
    else
    {
      std::cout << "<ded-core>Error:"
                << " unrecognised line in components file \"" << fname << "\""
                << line << "\n";
      std::exit(1);
    }
  }
  return build_options;
}

void
    generate_components(std::string fname, opts build_options)
{

  std::ofstream header(fname);

  header << "\n// Auto generated by "
            "component_builder.cpp\n\n#include\"components.h\"\n\n";

  for (auto [type, names] : build_options)
    for (auto name : names)
      header << "#include\"user/" << type << "/" << name << ".h\"\n";

  header << "\n#include<string_view>\n\nnamespace ded {\n\n";

  for (auto [type, names] : build_options)
  {
    header << "specs::" << type << "Spec default_" << type << "Spec(std::string name) {\n";
    for (auto name : names)
      header << "  if (name == \"" << name << "\") {\n    auto e = concepts::" << type
             << "{" << name
             << "()};\n    return e.publish_configuration();\n  }\n";
    header << "  std::cout << \"unknown-" << type
           << ": \" << name;\n  exit(1);\n}\n\n";
  }

  for (auto [type, names] : build_options)
  {
    header << "concepts::" << type << " make_" << type << "(specs::" << type << "Spec spec) {\n";
    for (auto name : names)
      header << "  if (spec.name() == \"" << name
             << "\") {\n    auto e = concepts::" << type << "{" << name
             << "()};\n    e.configure(spec);\n    return e;\n  }\n";
    header << "  std::cout << \"unknown-" << type
           << ": \" << spec.name();\n  exit(1);\n}\n\n";
  }

  for (auto name : ranges::view::concat(build_options["Entity"],
                                        build_options["Environment"],
                                        build_options["Population"]))
    header << "template<>\nstd::string auto_class_name_as_string<" << name
           << ">() \n{ return \"" << name << "\"; }\n\n";

  header << "void generate_all_specs() {\n";
  for (auto [type, names] : build_options)
  {
    header << "  generate_" << type << "Spec({"
           << (names |
               ranges::view::transform([](auto s) { return "\"" + s + "\""; }) |
               ranges::view::intersperse(",") | ranges::action::join)
           << "});\n";
  }
  header << "}\n\n} // namespace ded";
}

void
    generate_makefile(const std::string &fname,
                      opts               build_options,
                      std::string        args)
{
  auto as_header = [](auto s) { return s + ".h "; };
  auto as_source = [](auto s) { return s + ".cpp "; };
  auto as_object = [](auto s) {
    std::replace(s.begin(), s.end(), '/', '_');
    return "obj_files/" + s + ".o ";
  };

  std::vector<std::string> core_files = { "core/configuration",
                                          "core/utilities/csv/csv",
                                          "core/utilities/csv/csv_reader",
                                          "core/utilities/term_colours",
                                          "core/utilities/utilities",
                                          "core/parser/token",
                                          "core/parser/parser",
                                          "core/specs/configuration_primitive",
                                          "core/specs/signal_spec",
                                          "core/specs/population_spec",
                                          "core/specs/entity_spec",
                                          "core/specs/environment_spec",
                                          "core/concepts/environment",
                                          "core/concepts/entity",
                                          "core/concepts/population",
                                          "core/concepts/signal",
                                          "core/concepts/encoding" };

  std::vector<std::string> user_files;
  for (auto &[type, names] : build_options)
    for (auto &name : names)
      user_files.push_back("user/" + type + "/" + name);

  std::ofstream makefile(fname);

  makefile << "\n# Auto generated by component_builder.cpp";

  makefile << "\n\nflags = " << args;

  makefile << "\n\nheaders = components.h "
           << (core_files | ranges::view::transform(as_header) |
               ranges::action::join);

  makefile << "\n\ncomponents = obj_files/main.o obj_files/components.o "
           << (core_files | ranges::view::transform(as_object) |
               ranges::action::join)
           << (user_files | ranges::view::transform(as_object) |
               ranges::action::join);

  makefile << "\n\nded : $(components)"
              "\n\t$(flags) $(components) -lstdc++fs -o ded";

  makefile << "\n\nobj_files/main.o : main.cpp "
              "\n\t$(flags) -c main.cpp -o obj_files/main.o\n"
           << (core_files | ranges::view::transform([&](auto file) {
                 return "\n" + as_object(file) + ": " + as_source(file) +
                        "\n\t$(flags) -c " + as_source(file) + " -o " +
                        as_object(file) + "\n";
               }) |
               ranges::action::join)
           << "\nobj_files/components.o : components.cpp $(headers) "
           << (user_files | ranges::view::transform(as_header) |
               ranges::action::join)
           << "\n\t$(flags) -c components.cpp -o "
           << "obj_files/components.o\n"
           << (user_files | ranges::view::transform([&](auto file) {
                 return "\n" + as_object(file) + ": " + as_source(file) +
                        as_header(file) + " $(headers) \n\t$(flags) -c " +
                        as_source(file) + "-o " + as_object(file) + "\n";
               }) |
               ranges::action::join);

  makefile << "\n\nclean : "
           << "\n\trm obj_files/*.o"
           << "\n\trm ded\n\n";
}

int
    main(int argc, char **argv)
{

  auto bo = get_build_options("components.cfg");
  generate_components("components.cpp", bo);
  generate_makefile(
      "makefile", bo, argc > 1 ? argv[1] : "g++ -Wall -std=c++17 -O3 ");
  // " -Wall -std=c++17 -O3 "
  // " -Wall -std=c++17 -O0 -ggdb3 "
  // " -Wall -std=c++17 -O3 -ggdb3 -fsanitize=address -static-libasan "
}
